// <auto-generated />
using System;
using KKBookstore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KKBookstore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(KKBookstoreDbContext))]
    [Migration("20241202115740_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KKBookstore.Domain.Branches.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Branchs", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Customers.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<double>("MinSpending")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)")
                        .HasColumnName("MinSpending");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CustomerTypes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeliveryMethods", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.DiscountApplyToProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<int>("DiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("DiscountVoucherId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("DiscountApplyToProductTypes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.DiscountVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Code");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Description");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<decimal?>("MaximumDiscountValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumSpend")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Name");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UsageLimitOverall")
                        .HasColumnType("int");

                    b.Property<int?>("UsageLimitPerUser")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("DiscountVouchers", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Comment");

                    b.Property<DateTimeOffset?>("ConfirmedDeliveryWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ConfirmedReceivedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryInstruction")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("DeliveryInstruction");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DueWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpectedDeliveryWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderNumber");

                    b.Property<DateTimeOffset>("OrderWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("PaidWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PickingCompletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PriceDiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingDiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PriceDiscountVoucherId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("ShippingDiscountVoucherId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<DateTimeOffset?>("PickingCompletionTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DiscountVoucherId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderLines", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BankCode");

                    b.Property<string>("BankTranNo")
                        .IsRequired()
                        .HasMaxLength(260)
                        .IsUnicode(false)
                        .HasColumnType("varchar(260)")
                        .HasColumnName("BankTranNo");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("CardType");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<string>("OrderInfo")
                        .IsRequired()
                        .HasMaxLength(260)
                        .IsUnicode(false)
                        .HasColumnType("varchar(260)")
                        .HasColumnName("OrderInfo");

                    b.Property<DateTimeOffset>("PayDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("PayDate");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ResponseCode");

                    b.Property<int>("TransactionNo")
                        .HasColumnType("int")
                        .HasColumnName("TransactionNo");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TransactionStatus");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.VoucherUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<DateTimeOffset>("RedemptionTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OrderId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUsages", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DisplayName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("ParentProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ProductTypeCode");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentProductTypeId");

                    b.HasIndex("ProductTypeCode")
                        .IsUnique();

                    b.ToTable("ProductTypes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductTypeAttributes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttributeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductAttributeId");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeAttributeMappings", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttributeProductValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeValueId");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId", "AttributeValueId")
                        .IsUnique();

                    b.ToTable("ProductTypeAttributeProductValues", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ProductTypeAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductTypeAttributeId", "Value")
                        .IsUnique();

                    b.ToTable("ProductTypeAttributeValues", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorId");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookId");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<DateTimeOffset>("WriteTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("WriteTime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("BookId", "AuthorId")
                        .IsUnique();

                    b.ToTable("BookAuthors", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsBook")
                        .HasColumnType("bit")
                        .HasColumnName("IsBook");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeId");

                    b.Property<int>("UnitMeasureId")
                        .HasColumnType("int")
                        .HasColumnName("UnitMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("LargeImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LargeImageUrl");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<string>("ThumbnailImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThumbnailImageUrl");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsOptionWithImage")
                        .HasColumnType("bit")
                        .HasColumnName("IsOptionWithImage");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Name");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptions", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductOptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("LargeImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LargeImageUrl");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThumbnailImageUrl");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OptionId");

                    b.ToTable("ProductOptionValues", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EndTime");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantId");

                    b.Property<decimal>("RecommendedRetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("RecommendedRetailPrice");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartTime");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("ProductPriceHistories", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Barcode");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Comment");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<DateTimeOffset?>("DiscontinuedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<decimal>("RecommendedRetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("RecommendedRetailPrice");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TaxRate");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("UnitPrice");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Weight")
                        .HasPrecision(18, 2)
                        .HasColumnType("int")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductVariantOptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("OptionValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionValueId");

                    b.HasIndex("ProductVariantId", "OptionId", "OptionValueId")
                        .IsUnique();

                    b.ToTable("ProductVariantOptionValues", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Comment");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantId");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int")
                        .HasColumnName("RatingValue");

                    b.Property<int>("ReportedCount")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Response");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.RatingLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<bool>("Liked")
                        .HasColumnType("bit")
                        .HasColumnName("Liked");

                    b.Property<DateTimeOffset>("LikedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RatingId")
                        .HasColumnType("int")
                        .HasColumnName("RatingId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RatingId");

                    b.ToTable("RatingLikes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.UnitMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UnitMeasures", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ShoppingCartItems", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Stocks.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderLineId")
                        .HasColumnType("int");

                    b.Property<int>("PurchasePrice")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("StockStatus")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("KKBookstore.Domain.Users.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Commune")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Commune");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreationTime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorId");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int")
                        .HasColumnName("DeleterId");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DetailAddress")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("DetailAddress");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("District");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit")
                        .HasColumnName("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastModificationTime");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("Province");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("Addresses", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("KKBookstore.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeleterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("FirstName");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageUrl");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModificationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)")
                        .HasColumnName("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LoginType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPreferences")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("KKBookstore.Infrastructure.Identity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefreshTokenId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Customers.ShippingAddress", b =>
                {
                    b.HasBaseType("KKBookstore.Domain.Users.Address");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ReceiverName");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShippingAddresses", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Customers.Customer", b =>
                {
                    b.HasBaseType("KKBookstore.Domain.Users.User");

                    b.Property<int?>("CustomerTypeId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("CustomerTypeId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Branches.Branch", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.Customers.CustomerType", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.DeliveryMethod", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.DiscountApplyToProductType", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Orders.DiscountVoucher", "DiscountVoucher")
                        .WithMany("ProductTypesApplied")
                        .HasForeignKey("DiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.ProductTypes.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("DiscountVoucher");

                    b.Navigation("LastModifier");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.DiscountVoucher", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.Order", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Orders.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Orders.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Orders.DiscountVoucher", "PriceDiscountVoucher")
                        .WithMany()
                        .HasForeignKey("PriceDiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Customers.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Orders.DiscountVoucher", "ShippingDiscountVoucher")
                        .WithMany()
                        .HasForeignKey("ShippingDiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("LastModifier");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PriceDiscountVoucher");

                    b.Navigation("ShippingAddress");

                    b.Navigation("ShippingDiscountVoucher");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.OrderLine", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Orders.DiscountVoucher", "DiscountVoucher")
                        .WithMany()
                        .HasForeignKey("DiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Orders.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Products.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("DiscountVoucher");

                    b.Navigation("LastModifier");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.PaymentMethod", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.Transaction", b =>
                {
                    b.HasOne("KKBookstore.Domain.Orders.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.VoucherUsage", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Orders.DiscountVoucher", "Voucher")
                        .WithMany("VoucherUsages")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("LastModifier");

                    b.Navigation("Order");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductType", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.ProductTypes.ProductType", "ParentProductType")
                        .WithMany()
                        .HasForeignKey("ParentProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");

                    b.Navigation("ParentProductType");
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttribute", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttributeMapping", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.ProductTypes.ProductTypeAttribute", "ProductAttribute")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.ProductTypes.ProductType", "ProductType")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LastModifier");

                    b.Navigation("ProductAttribute");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttributeProductValue", b =>
                {
                    b.HasOne("KKBookstore.Domain.ProductTypes.ProductTypeAttributeValue", "AttributeValue")
                        .WithMany("ProductsAppliedValue")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("Creator");

                    b.Navigation("LastModifier");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttributeValue", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.ProductTypes.ProductTypeAttribute", "ProductTypeAttribute")
                        .WithMany("Values")
                        .HasForeignKey("ProductTypeAttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LastModifier");

                    b.Navigation("ProductTypeAttribute");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Author", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.BookAuthor", b =>
                {
                    b.HasOne("KKBookstore.Domain.Products.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Products.Product", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Product", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.ProductTypes.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Products.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");

                    b.Navigation("ProductType");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductImage", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductOption", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.Product", "Product")
                        .WithMany("Options")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductOptionValue", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.ProductOption", "Option")
                        .WithMany("OptionValues")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductPriceHistory", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductVariant", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("KKBookstore.Domain.Products.Dimension", "Dimension", b1 =>
                        {
                            b1.Property<int>("ProductVariantId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Height")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Length")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Width")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("ProductVariants");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.OwnsOne("KKBookstore.Domain.Products.SkuValue", "SkuValue", b1 =>
                        {
                            b1.Property<int>("ProductVariantId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("ProductVariants");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("Dimension")
                        .IsRequired();

                    b.Navigation("LastModifier");

                    b.Navigation("Product");

                    b.Navigation("SkuValue")
                        .IsRequired();
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductVariantOptionValue", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Products.ProductOptionValue", "OptionValue")
                        .WithMany()
                        .HasForeignKey("OptionValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Products.ProductVariant", "ProductVariant")
                        .WithMany("ProductVariantOptionValues")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");

                    b.Navigation("Option");

                    b.Navigation("OptionValue");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Rating", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.Product", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.ProductVariant", "ProductVariant")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("LastModifier");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.RatingLike", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.Rating", "Rating")
                        .WithMany("Likes")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("LastModifier");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.UnitMeasure", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Domain.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("LastModifier");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("KKBookstore.Domain.Stocks.Inventory", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Products.ProductVariant", "ProductVariant")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Branches.Branch", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");

                    b.Navigation("ProductVariant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("KKBookstore.Domain.Users.Address", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "Deleter")
                        .WithMany()
                        .HasForeignKey("DeleterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Users.User", "LastModifier")
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("LastModifier");
                });

            modelBuilder.Entity("KKBookstore.Infrastructure.Identity.RefreshToken", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KKBookstore.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("KKBookstore.Domain.Customers.ShippingAddress", b =>
                {
                    b.HasOne("KKBookstore.Domain.Customers.Customer", "Customer")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.Address", null)
                        .WithOne()
                        .HasForeignKey("KKBookstore.Domain.Customers.ShippingAddress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KKBookstore.Domain.Customers.Customer", b =>
                {
                    b.HasOne("KKBookstore.Domain.Customers.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("KKBookstore.Domain.Customers.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.DiscountVoucher", b =>
                {
                    b.Navigation("ProductTypesApplied");

                    b.Navigation("VoucherUsages");
                });

            modelBuilder.Entity("KKBookstore.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductType", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttribute", b =>
                {
                    b.Navigation("ProductTypes");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("KKBookstore.Domain.ProductTypes.ProductTypeAttributeValue", b =>
                {
                    b.Navigation("ProductsAppliedValue");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Product", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Options");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariants");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductOption", b =>
                {
                    b.Navigation("OptionValues");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.ProductVariant", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("ProductVariantOptionValues");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("KKBookstore.Domain.Products.Rating", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("KKBookstore.Domain.Customers.Customer", b =>
                {
                    b.Navigation("ShippingAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
