// <auto-generated />
using System;
using KKBookstore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KKBookstore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(KKBookstoreDbContext))]
    [Migration("20241020084840_RenameSkuToProductVariant")]
    partial class RenameSkuToProductVariant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeliveryMethodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeliveryMethods", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountApplyToProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("DiscountApplyToProductTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DiscountVoucherId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("DiscountApplyToProductTypes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountVoucherId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("EndWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("MaximumDiscountValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumSpend")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("StartWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UsageLimitOverall")
                        .HasColumnType("int");

                    b.Property<int?>("UsageLimitPerUser")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("DiscountVouchers", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmedDeliveryWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ConfirmedReceivedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DueWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpectedDeliveryWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OrderWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("PaidWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PickingCompletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PriceDiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingDiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PriceDiscountVoucherId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("ShippingDiscountVoucherId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderLineId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PickingCompletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DiscountVoucherId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderLines", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.RefAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefAddressTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RefAddressTypes");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BankTranNo")
                        .IsRequired()
                        .HasColumnType("varchar(260)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderInfo")
                        .IsRequired()
                        .HasColumnType("varchar(260)");

                    b.Property<DateTimeOffset>("PayDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionNo")
                        .HasColumnType("int");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.VoucherUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UsedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("VoucherUsageId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUsages", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuthorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookAuthorId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("WrittenWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductId", "AuthorId")
                        .IsUnique();

                    b.ToTable("BookAuthors", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBook")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UnitMeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductImageId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LargeImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductOptionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptionWithImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptions", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductOptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductOptionValueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LargeImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("OptionId");

                    b.ToTable("ProductOptionValues", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductPriceHistoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EndWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedRetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("StartWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductPriceHistories", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DiscontinuedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedRetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Weight")
                        .HasPrecision(18, 2)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Skus");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariantOptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantOptionValueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("OptionValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionValueId");

                    b.HasIndex("ProductVariantId", "OptionId", "OptionValueId")
                        .IsUnique();

                    b.ToTable("SkuOptionValues");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RatingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("ReportedCount")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.RatingLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RatingLikeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Liked")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LikedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("RatingLikes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.UnitMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitMeasureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UnitMeasures");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("ParentProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DisplayName")
                        .IsUnique();

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ParentProductTypeId");

                    b.ToTable("ProductTypes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeAttributeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductTypeAttributes", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttributeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeAttributeMappingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeAttributeMappings", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttributeProductValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeAttributeProductValueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductId", "AttributeValueId")
                        .IsUnique();

                    b.ToTable("ProductTypeAttributeProductValues", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeAttributeValueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductTypeAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductTypeAttributeId", "Value")
                        .IsUnique();

                    b.ToTable("ProductTypeAttributeValues", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ShoppingCartAggregate.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShoppingCartItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.UserAggregate.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShippingAddressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Commune")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DetailAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<int?>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LoginType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPreferences")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastEditedBy");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Infrastructure.Identity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefreshTokenId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.DeliveryMethod", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountApplyToProductType", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountVoucher", "DiscountVoucher")
                        .WithMany("ProductTypesApplied")
                        .HasForeignKey("DiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DiscountVoucher");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountVoucher", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountVoucher", "PriceDiscountVoucher")
                        .WithMany()
                        .HasForeignKey("PriceDiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountVoucher", "ShippingDiscountVoucher")
                        .WithMany()
                        .HasForeignKey("ShippingDiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PriceDiscountVoucher");

                    b.Navigation("ShippingAddress");

                    b.Navigation("ShippingDiscountVoucher");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.OrderLine", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountVoucher", "DiscountVoucher")
                        .WithMany()
                        .HasForeignKey("DiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DiscountVoucher");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.PaymentMethod", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.RefAddressType", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.Transaction", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.VoucherUsage", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountVoucher", "Voucher")
                        .WithMany("VoucherUsages")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Order");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Author", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.BookAuthor", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("BookAuthors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductType");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductImage", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductOption", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("Options")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductOptionValue", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.ProductOption", "Option")
                        .WithMany("OptionValues")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductPriceHistory", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariant", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("KKBookstore.Domain.Aggregates.ProductAggregate.Dimension", "Dimension", b1 =>
                        {
                            b1.Property<int>("ProductVariantId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Height")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Length")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Width")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("Skus");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.OwnsOne("KKBookstore.Domain.Aggregates.ProductAggregate.SkuValue", "SkuValue", b1 =>
                        {
                            b1.Property<int>("ProductVariantId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("Skus");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.Navigation("CreatedByUser");

                    b.Navigation("Dimension")
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");

                    b.Navigation("SkuValue")
                        .IsRequired();
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariantOptionValue", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.ProductOptionValue", "OptionValue")
                        .WithMany()
                        .HasForeignKey("OptionValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariant", "ProductVariant")
                        .WithMany("ProductVariantOptionValues")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Option");

                    b.Navigation("OptionValue");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Rating", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.Product", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariant", "ProductVariant")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.RatingLike", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.Rating", "Rating")
                        .WithMany("Likes")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Rating");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.UnitMeasure", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductType", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductType", "ParentProductType")
                        .WithMany()
                        .HasForeignKey("ParentProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ParentProductType");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttribute", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttributeMapping", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttribute", "ProductAttribute")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductType", "ProductType")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductAttribute");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttributeProductValue", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttributeValue", "AttributeValue")
                        .WithMany("ProductsAppliedValue")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttributeValue", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttribute", "ProductTypeAttribute")
                        .WithMany("Values")
                        .HasForeignKey("ProductTypeAttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductTypeAttribute");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ShoppingCartAggregate.ShoppingCartItem", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.UserAggregate.ShippingAddress", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.OrderAggregate.RefAddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Infrastructure.Identity.RefreshToken", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KKBookstore.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.DiscountVoucher", b =>
                {
                    b.Navigation("ProductTypesApplied");

                    b.Navigation("VoucherUsages");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Options");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariants");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductOption", b =>
                {
                    b.Navigation("OptionValues");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.ProductVariant", b =>
                {
                    b.Navigation("ProductVariantOptionValues");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductAggregate.Rating", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductType", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttribute", b =>
                {
                    b.Navigation("ProductTypes");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("KKBookstore.Domain.Aggregates.ProductTypeAggregate.ProductTypeAttributeValue", b =>
                {
                    b.Navigation("ProductsAppliedValue");
                });
#pragma warning restore 612, 618
        }
    }
}
